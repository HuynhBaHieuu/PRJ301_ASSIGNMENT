/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package controller;

import jakarta.mail.MessagingException;
import java.io.IOException;
import java.io.PrintWriter;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.util.Map;
import model.CartItem;
import model.Product;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import model.Cart;
import model.Order;
import model.User;
import service.IOrderService;
import service.IProductService;
import service.OrderService;
import service.ProductService;
import utils.EmailUtil;

/**
 *
 * @author Admin
 */
@WebServlet(name = "CheckoutServlet", urlPatterns = {"/CheckoutServlet"})
public class CheckoutServlet extends HttpServlet {

    private IOrderService orderService = new OrderService();
    private IProductService productService = new ProductService();

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        HttpSession session = request.getSession();
        Cart cart = (Cart) session.getAttribute("cart");

        // Ki·ªÉm tra gi·ªè h√†ng
        if (cart == null || cart.getItems().isEmpty()) {
            response.sendRedirect("cart/cart2.jsp");
            return;
        }

        User user = (User) session.getAttribute("user");
        if (user == null) {
            response.sendRedirect("login.jsp");
            return;
        }

        int userId = user.getId();
        Double totalPrice = cart.getTotalCost();

        // Ki·ªÉm tra t·ªìn kho tr∆∞·ªõc khi cho ph√©p ƒë·∫∑t h√†ng
        boolean isValid = true;
        while (isValid) {
            for (Map.Entry<Integer, CartItem> entry : cart.getItems().entrySet()) {
                Product product = productService.getProductById(entry.getKey());
                CartItem item = entry.getValue();

                // Ki·ªÉm tra n·∫øu s·ªë l∆∞·ª£ng ƒë·∫∑t v∆∞·ª£t qu√° t·ªìn kho
                if (item.getQuantity() > product.getStock()) {
                    // Th√¥ng b√°o l·ªói v·ªÅ s·ªë l∆∞·ª£ng kh√¥ng ƒë·ªß
//                    request.setAttribute("errorMessage", "S·∫£n ph·∫©m '" + product.getName() + "' kh√¥ng ƒë·ªß h√†ng trong kho.");
//                    request.getRequestDispatcher("cart/cart2.jsp").forward(request, response);
                    session.setAttribute("errorMessage", "S·∫£n ph·∫©m '" + product.getName() + "' kh√¥ng ƒë·ªß h√†ng trong kho.");
                    response.sendRedirect(request.getContextPath() + "/cart/cart2.jsp");
                    return;  // D·ª´ng qu√° tr√¨nh ƒë·∫∑t h√†ng v√† y√™u c·∫ßu nh·∫≠p l·∫°i
                }
            }
            isValid = false;  // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m n√†o v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªìn kho, tho√°t kh·ªèi v√≤ng l·∫∑p
        }

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        Order order = new Order(userId, totalPrice, "0");

        try {
            orderService.addOrder(order);  // Th√™m ƒë∆°n h√†ng v√†o b·∫£ng Orders

            // Th√™m chi ti·∫øt ƒë∆°n h√†ng v√† tr·ª´ t·ªìn kho
            for (Map.Entry<Integer, CartItem> entry : cart.getItems().entrySet()) {
                int productId = entry.getKey();
                CartItem item = entry.getValue();
                Product product = productService.getProductById(productId);

                // Th√™m chi ti·∫øt ƒë∆°n h√†ng
                orderService.addOrderDetail(order.getId(), productId, item.getQuantity(), product.getPrice());

                // C·∫≠p nh·∫≠t t·ªìn kho
                int newQuantity = product.getStock() - item.getQuantity();
                productService.updateStock(productId, newQuantity);  // C·∫≠p nh·∫≠t kho
            }
            //G·ª£i √Ω s·∫£n ph·∫©m

            Set<Integer> suggestedCategoryIds = new HashSet<>();

            Set<Integer> seenProductIds = new HashSet<>();

            for (CartItem item : cart.getItems().values()) {

                suggestedCategoryIds.add(item.getProduct().getCategoryId());

                seenProductIds.add(item.getProduct().getId());

            }

            List<Product> suggested = new ArrayList<>();

            if (productService instanceof ProductService) {

                ProductService concreteService = (ProductService) productService;

                for (int categoryId : suggestedCategoryIds) {

                    List<Product> candidates = concreteService.getSuggestedProductsByCategory(categoryId, seenProductIds, 10);

                    for (Product p : candidates) {

                        if (!suggested.contains(p)) {

                            suggested.add(p);

                            if (suggested.size() >= 5) {

                                break;

                            }

                        }

                    }

                    if (suggested.size() >= 5) {

                        break;

                    }

                }

            }

            //G·ª≠i email x√°c nh·∫≠n
            String userEmail = user.getEmail(); // l·∫•y email c·ªßa user ƒë·ªÉ g·ª≠i x√°c nh·∫≠n

            String subject = "X√°c nh·∫≠n ƒë∆°n h√†ng #" + order.getId();

            // T·∫°o n·ªôi dung chi ti·∫øt ƒë∆°n h√†ng
            StringBuilder message = new StringBuilder();

            message.append("<h3>C·ª≠a h√†ng N√¥ng S·∫£n T∆∞∆°ng Lai xin ch√¢n th√†nh c·∫£m ∆°n qu√Ω kh√°ch ƒë√£ ƒë·∫∑t h√†ng!</h3>");
            message.append("M√£ ƒë∆°n h√†ng: <b>#" + order.getId() + "</b><br>");

            message.append("Chi ti·∫øt ƒë∆°n h√†ng:<br><br>");

            for (CartItem item : cart.getItems().values()) {

                Product p = item.getProduct();

                message.append("<b>- " + p.getName() + " | SL: " + item.getQuantity() + " | Gi√°: " + p.getPrice() + " VNƒê</b><br>");

            }

            message.append("<br><h3>üëâ T·ªïng ti·ªÅn: " + totalPrice + " VNƒê</h3>");

            message.append("ƒê·ªôi ng≈© ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng c·ªßa b·∫°n s·ªõm nh·∫•t.<br>");

            message.append("N·∫øu c√≥ v·∫•n ƒë·ªÅ g√¨ th·∫Øc m·∫Øc, qu√Ω kh√°ch c√≥ th·ªÉ li√™n h·ªá qua SƒêT: <b style=\"color:red;\">0829 495 069</b><br><br>");

            message.append("<h3>üõçÔ∏è G·ª£i √Ω d√†nh ri√™ng cho b·∫°n</h3>");

            message.append("<table>");

            for (Product s : suggested) {

                message.append("<tr>");

//                message.append("<td style='padding: 10px;'>");
//                String imageBaseUrl = "http://localhost:8080/BoTuoi/image/";
//                message.append("<img src='" + imageBaseUrl + s.getImageUrl() + "' width='100' height='100' style='object-fit: cover; border-radius: 8px;'/>");
//                message.append("</td>");
                message.append("<td style='padding: 10px;'>");

                message.append("<b>" + s.getName() + "</b><br>");

                message.append("Gi√°: " + s.getPrice() + " VNƒê<br>");

                message.append("<a href=\"http://localhost:8080/BoTuoi/product/productDetail.jsp?id=" + s.getId() + "\">Xem chi ti·∫øt</a>");

                message.append("</td>");

                message.append("</tr>");

            }

            message.append("</table><br><br>");

            message.append("Truy c·∫≠p <a href=\"http://localhost:8080/BoTuoi/login.jsp \">website c·ªßa ch√∫ng t√¥i</a> ƒë·ªÉ xem th√™m c√°c s·∫£n ph·∫©m kh√°c.");

            // G·ª≠i email
            try {

                EmailUtil.sendEmail(userEmail, subject, message.toString());

            } catch (MessagingException e) {

                e.printStackTrace(); // Ho·∫∑c log l·ªói

            }
        } catch (SQLException ex) {
            Logger.getLogger(CheckoutServlet.class.getName()).log(Level.SEVERE, null, ex);
            // N·∫øu c√≥ l·ªói, g·ª≠i ng∆∞·ªùi d√πng quay l·∫°i gi·ªè h√†ng v·ªõi th√¥ng b√°o l·ªói
            request.setAttribute("errorMessage", "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
            request.getRequestDispatcher("cart/cart2.jsp").forward(request, response);
            return;
        }

        // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng th√†nh c√¥ng
        session.removeAttribute("cart");

        // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang th√†nh c√¥ng
        response.sendRedirect("cart/success.jsp");
    }
}
